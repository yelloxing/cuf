#!/usr/bin/env node

'use strict';

process.title = 'cuf';

const __ = require('@yelloxing/core.js');
const cuf = require('../index');
const options = require('./options').config;
const help = require('./options').help;

// 组装好缩写和全写的映射
let shortHands = {};
for (let key in options) {
  if (options[key].short) shortHands["-" + options[key].short] = "--" + key;
}

// 命令行传递的参数
const parsed = cuf.option(shortHands, process.argv);

// 如果添加了配置文件，直接根据配置文件运行
if (__.isArray(parsed.config)) {
  cuf.print(`
  温馨提示：配置文件方式运行开发中，请先使用命令行模式调用！
  `);
  return;
}

// 判断是否需要帮助
if (__.isArray(parsed.help)) {

  // 打印具体的配置提示
  if (parsed.help.length > 0) {
    let help0 = parsed.help[0];

    // 缩写转全拼
    if (help0.length == 1) {
      help0 = shortHands["-" + help0];

      if (help0) {
        help0 = help0.replace(/^--/, "");

        // 根据需要帮助的命令获取对应的信息
        const help0Option = options[help0];
        cuf.log(`
  `+ help0Option.demo + `         ` + help0Option.info + `
        `);

        return;
      }
    }

  }

  // 打印统一提示
  cuf.log(help);
}

// 非帮助，开始执行具体的任务
// 不同命令之间存在执行优先级
// 这里的编写顺序需要和options.js中不同命令前面的[num]数字对应
// 数字越小优先级越高，非数字不参与优先级竞争
else {

  // 删除
  if (__.isArray(parsed.delete) && parsed.delete.length > 0) {
    cuf.deleteSync(cuf.fullPath(parsed.delete[0]));
  }

  // 复制
  else if (__.isArray(parsed.copy) && parsed.copy.length > 1) {
    cuf.copySync(cuf.fullPath(parsed.copy[0]), cuf.fullPath(parsed.copy[1]));
  }

  // 剪切
  else if (__.isArray(parsed.move) && parsed.move.length > 1) {
    cuf.moveSync(cuf.fullPath(parsed.move[0]), cuf.fullPath(parsed.move[1]));
  }

  // 否则
  else {

    cuf.log(`
  Invalid command!
    `);
  }
}